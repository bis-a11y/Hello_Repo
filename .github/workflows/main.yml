name: NewProject

on:
  push:
    branches:
      - production

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Image Tag
        run: |
          IMAGE_TAG=2.0
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: DPRJOECT1
          push: true
          tags: ghcr.io/${{ github.actor }}/my-dockerimage-web:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Production environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_GITHUB_PAT }}
          script: |
            for SERVER in $(echo "${{ secrets.SERVER_HOST }}" | tr ',' '\n'); do
              echo "Deploying to $SERVER ..."
              ssh -o StrictHostKeyChecking=no root@$SERVER <<'EOF'
                set -e
                echo "Logging into GHCR..."
                echo "${{ secrets.SERVER_GITHUB_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

                echo "Stopping old container..."
                docker compose down || true

                echo "Pulling new image..."
                docker compose pull

                echo "Starting updated container..."
                docker compose up -d --build

                echo "âœ… Deployment completed on $SERVER"
              EOF
            done

